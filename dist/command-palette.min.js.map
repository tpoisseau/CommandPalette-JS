{"version":3,"file":"command-palette.min.js","sources":["../src/CommandPalette.js"],"sourcesContent":["/**\n * @typedef {object} CommandPalette~Command\n * @property {string|symbol} name - Name of command (print in palette after category name)\n * @property {string} [description] - Detail text for explain action of command\n * @property {function} action - Callback when user press `Enter` on command when selected\n */\n\n/**\n * @callback CommandPalette~ConstructorOptionsShortcut\n * @param {KeyboardEvent} event - keypress event from document\n * @return {boolean} - return true if keypress event is your shortcut\n */\n\n/**\n * @callback CommandPalette~ConstructorOptionsNavigation\n * @param {KeyboardEvent} event - keypress event from document\n * @this {CommandPalette}\n */\n\n/**\n * @typedef {object} CommandPalette~ConstructorOptions\n * @property {string} [cssClass] - add if you want stylize the palette with your own css ;-)\n * @property {CommandPalette~ConstructorOptionsShortcut} [isShortcut] - take a KeyboardEvent and return if right shortcut, by default the shortcut is ctrl-alt-p\n * @property {CommandPalette~ConstructorOptionsNavigation} [navigationCallback] - take a KeyboardEvent and execute your navigation\n */\n\n/**\n * @type {number}\n */\nlet sequence = 0;\n\n/**\n * @type {CommandPalette~ConstructorOptions}\n */\nconst defaultOptions = {\n  isShortcut: event => event.ctrlKey && event.altKey && event.key === 'p',\n  navigationCallback(event) {\n    switch(event.key) {\n      case 'ArrowDown':\n        this.next();\n        break;\n      case 'ArrowUp':\n        this.prev();\n        break;\n      case 'Enter':\n        this.dispatch();\n        break;\n    }\n  }\n};\n\n/**\n * @property {CommandPalette~ConstructorOptions} options\n */\nclass CommandPalette {\n\n  /**\n   * @returns {number}\n   * @private\n   */\n  static get _sequence() {\n    return sequence++;\n  }\n\n  /**\n   * @param {CommandPalette~ConstructorOptions} [options={}] - Options for palette\n   * @example\n   * // add `cmd-palette--custom` class to classlist of root command-palette dom element\n   * new CommandPalette({\n   *  cssClass: 'cmd-palette--custom'\n   * });\n   *\n   * // use ctrl+alt+m ShortCut for display palette\n   * new CommandPalette({\n   *  isShortcut: e => e.ctrlKey && e.altKey && e.key === 'm'\n   * });\n   *\n   * // shift+ArrowDown or shift+ArrowUp for navigate 5 by 5\n   * new CommandPalette({\n   *  navigationCallback(event) {\n   *    switch(event.key) {\n   *      case 'ArrowDown':\n   *        event.shiftKey\n   *          ? (this.next(), this.next(), this.next(), this.next(), this.next())\n   *          : this.next();\n   *        break;\n   *      case 'ArrowUp':\n   *        event.shiftKey\n   *          ? (this.prev(), this.prev(), this.prev(), this.prev(), this.prev())\n   *          : this.prev();\n   *        break;\n   *      case 'Enter':\n   *        this.dispatch();\n   *        break;\n   *    }\n   *  }\n   * );\n   */\n  constructor(options={}) {\n    this.contexts = {\n      '': {}\n    };\n    this._id = CommandPalette._sequence;\n    this.options = Object.assign({}, defaultOptions, options);\n    this._initEvent();\n  }\n\n  /**\n   * If no category specified, merge commands in generic category\n   * else replace existent category (if exist) with this set of commands\n   *\n   * @param {CommandPalette~Command[]} commands\n   * @param {string|symbol} [category='']\n   *\n   * @example\n   * // add commands to default context\n   * palette.setCategory([\n   *  {\n   *    name: 'foo',\n   *    description: 'log `foo` in console'\n   *    action() {\n   *      console.log('foo');\n   *    }\n   *  }\n   * ])\n   *\n   * // replace `Bar` context\n   * palette.setCategory([\n   *  {\n   *    name: 'foo',\n   *    description: 'log `foo` in console'\n   *    action() {\n   *      console.log('foo');\n   *    }\n   *  }\n   * ], 'Bar')\n   */\n  setCategory(commands=[], category='') {\n    const context = name ? {} : this.contexts[name];\n    commands.forEach(cmd => context[cmd.name] = cmd);\n\n    this.contexts[name] = context;\n  }\n\n  /**\n   * @param {string|symbol} category\n   */\n  removeCategory(category) {\n    if (!category) return;\n    if (!category in this.contexts) return;\n\n    delete this.contexts[category];\n  }\n\n  /**\n   * Add list (or single) Command to the category\n   *\n   * @param {CommandPalette~Command | CommandPalette~Command[]} commands\n   * @param {string|symbol} [category=''] - Generic category if not specified\n   */\n  addToCategory(commands, category='') {\n    this.contexts[category] || (this.contexts[category] = {});\n\n    if (Array.isArray(commands)) {\n      commands.forEach(command => this.contexts[category][command.name] = command);\n    } else {\n      this.contexts[category][commands.name] = commands;\n    }\n  }\n\n  /**\n   * @returns {HTMLElement}\n   * @private\n   */\n  _findDom() {\n    return document.getElementById(`cmd-palette-${this._id}`);\n  }\n\n  /**\n   * @returns {string[]}\n   * @private\n   */\n  _generateCommandDOM() {\n    const commands = [];\n\n    for (let [category, context] of Object.entries(this.contexts)) {\n      console.log(context, category);\n      for (let [name, command] of Object.entries(context)) {\n        commands.push({\n          ...command, category, name,\n          title: `${category ? `${category}: ` : ''}${name}`,\n        });\n      }\n    }\n\n    return commands\n      .sort((a, b) => a.category.localeCompare(b.category) || a.title.localeCompare(b.title))\n      .map((cmd, idx) => `\n        <li data-category=\"${cmd.category}\" data-name=\"${cmd.name}\"${idx === 0 ? ' selected': ''}>\n          <span class=\"title\">${cmd.title}</span>\n          <span class=\"description\">${cmd.description}</span>\n        </li>\n      `);\n  }\n\n  /**\n   * @returns {HTMLElement}\n   * @private\n   */\n  _generateDom() {\n    document.body.insertAdjacentHTML('afterbegin', `\n      <div id=\"cmd-palette-${this._id}\" class=\"cmd-palette${this.options.cssClass ? ' ' + this.options.cssClass : ''} cmd-palette--hide\">\n        <input type=\"text\" placeholder=\"Search Command\">\n        <ul>\n          ${this._generateCommandDOM().join('\\n')}\n        </ul>\n      </div>\n    `);\n\n    const dom = this._findDom();\n    dom.querySelector('input').addEventListener('keyup', event => this.search(event.target.value));\n\n    return dom;\n  }\n\n  /**\n   * @returns {HTMLElement}\n   * @private\n   */\n  _findOrGenerateDom() {\n    return this._findDom() || this._generateDom();\n  }\n\n  /**\n   * lazy load the command palette and display it\n   */\n  show() {\n    const dom = this._findOrGenerateDom();\n    dom.classList.replace('cmd-palette--hide', 'cmd-palette--show');\n    dom.querySelector('input').focus();\n  }\n\n  /**\n   * lazy load the command palette and hide it\n   */\n  hide() {\n    const dom = this._findOrGenerateDom();\n    dom.classList.replace('cmd-palette--show', 'cmd-palette--hide');\n  }\n\n  /**\n   * lazy load the command palette and return if it display\n   *\n   * @returns {boolean}\n   */\n  isShow() {\n    return this._findOrGenerateDom().classList.contains('cmd-palette--show');\n  }\n\n  /**\n   * lazy load the command palette and return if it not display\n   *\n   * @returns {boolean}\n   */\n  isHide() {\n    return this._findOrGenerateDom().classList.contains('cmd-palette--hide');\n  }\n\n  /**\n   * return selected element in list of commands\n   *\n   * @returns {Element | null}\n   * @private\n   */\n  _getSelectedDomItem() {\n    return this._findOrGenerateDom().querySelector('li[selected]');\n  }\n\n  /**\n   * lazy load the palette\n   * and select next item in command list\n   */\n  next() {\n    if (this.isHide()) return;\n\n    const oldSelected = this._getSelectedDomItem();\n    if (!oldSelected) return;\n    let selected = oldSelected;\n\n    while(selected.nextElementSibling) {\n      selected = selected.nextElementSibling;\n\n      if (selected.matches('.cmd-palette-item--hide')) continue;\n      break;\n    }\n\n    oldSelected.removeAttribute('selected');\n    selected.setAttribute('selected', 'selected');\n  }\n\n  /**\n   * lazy load the palette\n   * and select previous item in command list\n   */\n  prev() {\n    if (this.isHide()) return;\n\n    const oldSelected = this._getSelectedDomItem();\n    if (!oldSelected) return;\n    let selected = oldSelected;\n\n    while(selected.previousElementSibling) {\n      selected = selected.previousElementSibling;\n\n      if (selected.classList.contains('cmd-palette-item--hide')) continue;\n      break;\n    }\n\n    oldSelected.removeAttribute('selected');\n    selected.setAttribute('selected', 'selected');\n  }\n\n  /**\n   * fuzzy searching\n   *\n   * @param {string} search\n   * @param {string} term\n   * @returns {boolean}\n   * @private\n   */\n  static _fuzzySearch(search, term) {\n    let hay = term.toLowerCase(), i = 0, n = -1, l;\n    search = search.toLowerCase();\n    for (; l = search[i++] ;) if (!~(n = hay.indexOf(l, n + 1))) return false;\n    return true;\n  }\n\n  /**\n   * lazy load palette\n   * and hide items whose not respect the fuzzySearch terms\n   *\n   * @param {string} text\n   */\n  search(text) {\n    if (this.isHide()) return;\n    console.log('start search', text);\n\n    const dom = this._findOrGenerateDom();\n    const items = [...dom.querySelectorAll('li')];\n\n    if (!text) {\n      items.forEach(li => li.classList.remove('cmd-palette-item--hide'));\n    } else {\n      items.forEach(li => {\n        if (CommandPalette._fuzzySearch(text, li.querySelector('.title').textContent)) {\n          li.classList.remove('cmd-palette-item--hide');\n        } else {\n          li.classList.add('cmd-palette-item--hide');\n        }\n      });\n    }\n\n    dom.querySelector('li[selected].cmd-palette-item--hide') && this.prev();\n    dom.querySelector('li[selected].cmd-palette-item--hide') && this.next();\n  }\n\n  /**\n   * lazy load palette\n   * and run selected command\n   */\n  dispatch() {\n    if (this.isHide()) return;\n\n    const dom = this._findOrGenerateDom();\n    const item = dom.querySelector('li[selected]:not(.cmd-palette-item--hide)');\n    if (!item) return;\n\n    const {category='', name} = item.dataset;\n    const context = this.contexts[category];\n    if(!context) return;\n\n    const command = context[name];\n    if(!command) return;\n\n    typeof command.action === 'function' && command.action();\n  }\n\n  /**\n   * place some events handler in document\n   *\n   * @private\n   */\n  _initEvent() {\n    this._docClickHide = event => {\n      if (event.target.matches('#cmd-palette') || event.target.closest('#cmd-palette')) return;\n\n      this.hide();\n    };\n\n    this._docKeyPressShow = evt => this.options.isShortcut(evt) && this.show();\n    this._docKeyPressNav = evt => {\n      if (this.isHide()) return;\n\n      this.options.navigationCallback.call(this, evt);\n    };\n\n    document.addEventListener('click', this._docClickHide);\n    document.addEventListener('keypress', this._docKeyPressShow);\n    document.addEventListener('keypress', this._docKeyPressNav);\n  }\n\n  /**\n   * Remove CommandPalette from DOM\n   */\n  destroy() {\n    document.removeEventListener('click', this._docClickHide);\n    document.removeEventListener('keypress', this._docKeyPressShow);\n    document.removeEventListener('keypress', this._docKeyPressNav);\n\n    const dom = this._findDom();\n    dom.parentNode.removeChild(dom);\n  }\n}\n\nexport default CommandPalette;"],"names":["sequence","defaultOptions","event","ctrlKey","altKey","key","next","prev","dispatch","options","contexts","_id","CommandPalette","_sequence","Object","assign","_initEvent","commands","context","name","this","forEach","cmd","category","Array","isArray","_this","command","document","getElementById","entries","log","push","sort","a","b","localeCompare","title","map","idx","description","body","insertAdjacentHTML","cssClass","_generateCommandDOM","join","dom","_findDom","querySelector","addEventListener","_this2","search","target","value","_generateDom","_findOrGenerateDom","classList","replace","focus","contains","isHide","oldSelected","_getSelectedDomItem","selected","nextElementSibling","matches","removeAttribute","setAttribute","previousElementSibling","text","items","querySelectorAll","_fuzzySearch","li","textContent","remove","add","item","dataset","action","_docClickHide","closest","hide","_docKeyPressShow","_this3","isShortcut","evt","show","_docKeyPressNav","navigationCallback","call","removeEventListener","parentNode","removeChild","term","hay","toLowerCase","i","n","l","indexOf"],"mappings":"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"}