{"version":3,"file":"command-palette.min.js","sources":["../src/CommandPalette.js"],"sourcesContent":["/**\n * @typedef {object} CommandPalette~Command\n * @property {string|symbol} name\n * @property {function} action\n * @property {?string} description\n */\n\nlet sequence = 0;\n\n/**\n * @class CommandPalette\n */\nexport default class CommandPalette {\n\n  /**\n   * @returns {number}\n   * @private\n   */\n  static get _sequence() {\n    return sequence++;\n  }\n\n  constructor() {\n    this.contexts = {\n      '': {}\n    };\n    this._id = CommandPalette._sequence;\n    this._initEvent();\n  }\n\n  /**\n   * @param {CommandPalette~Command[]} commands\n   * @param {string|symbol} [name='']\n   *\n   * @example\n   * // add commands to default context\n   * palette.setContext([\n   *  {\n   *    name: 'foo',\n   *    description: 'log `foo` in console'\n   *    action() {\n   *      console.log('foo');\n   *    }\n   *  }\n   * ])\n   *\n   * // replace `Bar` context\n   * palette.setContext([\n   *  {\n   *    name: 'foo',\n   *    description: 'log `foo` in console'\n   *    action() {\n   *      console.log('foo');\n   *    }\n   *  }\n   * ], 'Bar')\n   */\n  setContext(commands=[], name='') {\n    const context = name ? {} : this.contexts[name];\n    commands.forEach(cmd => context[cmd.name] = cmd);\n\n    this.contexts[name] = context;\n  }\n\n  /**\n   * @param {string|symbol} name\n   */\n  removeContext(name) {\n    if (!name) return;\n    if (!name in this.contexts) return;\n\n    delete this.contexts[name];\n  }\n\n  /**\n   * @param {CommandPalette~Command} command\n   * @param {string|symbol} [name='']\n   */\n  addToContext(command, name='') {\n    this.contexts[name] || (this.contexts[name] = {});\n\n    this.contexts[name][command.name] = command;\n  }\n\n  /**\n   * @returns {HTMLElement}\n   * @private\n   */\n  _findDom() {\n    return document.getElementById(`cmd-palette-${this._id}`);\n  }\n\n  /**\n   * @returns {string[]}\n   * @private\n   */\n  _generateCommandDOM() {\n    const commands = [];\n\n    for (let [category, context] of Object.entries(this.contexts)) {\n      console.log(context, category);\n      for (let [name, command] of Object.entries(context)) {\n        commands.push({\n          ...command, category, name,\n          title: `${category ? `${category}: ` : ''}${name}`,\n        });\n      }\n    }\n\n    return commands\n      .sort((a, b) => a.category.localeCompare(b.category) || a.title.localeCompare(b.title))\n      .map((cmd, idx) => `\n        <li data-category=\"${cmd.category}\" data-name=\"${cmd.name}\"${idx === 0 ? ' selected': ''}>\n          <span class=\"title\">${cmd.title}</span>\n          <span class=\"description\">${cmd.description}</span>\n        </li>\n      `);\n  }\n\n  /**\n   * @returns {HTMLElement}\n   * @private\n   */\n  _generateDom() {\n    document.body.insertAdjacentHTML('afterbegin', `\n      <div id=\"cmd-palette-${this._id}\" class=\"cmd-palette cmd-palette--hide\">\n        <input type=\"text\" placeholder=\"Search Command\">\n        <ul>\n          ${this._generateCommandDOM().join('\\n')}\n        </ul>\n      </div>\n    `);\n\n    const dom = this._findDom();\n    dom.querySelector('input').addEventListener('keyup', event => this.search(event.target.value));\n\n    return dom;\n  }\n\n  /**\n   * @returns {HTMLElement}\n   * @private\n   */\n  _findOrGenerateDom() {\n    return this._findDom() || this._generateDom();\n  }\n\n  /**\n   * lazy load the command palette and display it\n   */\n  show() {\n    const dom = this._findOrGenerateDom();\n    dom.classList.replace('cmd-palette--hide', 'cmd-palette--show');\n    dom.querySelector('input').focus();\n  }\n\n  /**\n   * lazy load the command palette and hide it\n   */\n  hide() {\n    const dom = this._findOrGenerateDom();\n    dom.classList.replace('cmd-palette--show', 'cmd-palette--hide');\n  }\n\n  /**\n   * lazy load the command palette and return if it display\n   *\n   * @returns {boolean}\n   */\n  isShow() {\n    return this._findOrGenerateDom().classList.contains('cmd-palette--show');\n  }\n\n  /**\n   * lazy load the command palette and return if it not display\n   *\n   * @returns {boolean}\n   */\n  isHide() {\n    return this._findOrGenerateDom().classList.contains('cmd-palette--hide');\n  }\n\n  /**\n   * return selected element in list of commands\n   *\n   * @returns {Element | null}\n   * @private\n   */\n  _getSelectedDomItem() {\n    return this._findOrGenerateDom().querySelector('li[selected]');\n  }\n\n  /**\n   * lazy load the palette\n   * and select next item in command list\n   */\n  next() {\n    if (this.isHide()) return;\n\n    const oldSelected = this._getSelectedDomItem();\n    if (!oldSelected) return;\n    let selected = oldSelected;\n\n    while(selected.nextElementSibling) {\n      selected = selected.nextElementSibling;\n\n      if (selected.matches('.cmd-palette-item--hide')) continue;\n      break;\n    }\n\n    oldSelected.removeAttribute('selected');\n    selected.setAttribute('selected', 'selected');\n  }\n\n  /**\n   * lazy load the palette\n   * and select previous item in command list\n   */\n  prev() {\n    if (this.isHide()) return;\n\n    const oldSelected = this._getSelectedDomItem();\n    if (!oldSelected) return;\n    let selected = oldSelected;\n\n    while(selected.previousElementSibling) {\n      selected = selected.previousElementSibling;\n\n      if (selected.classList.contains('cmd-palette-item--hide')) continue;\n      break;\n    }\n\n    oldSelected.removeAttribute('selected');\n    selected.setAttribute('selected', 'selected');\n  }\n\n  /**\n   * fuzzy searching\n   *\n   * @param {string} search\n   * @param {string} term\n   * @returns {boolean}\n   * @private\n   */\n  static _fuzzySearch(search, term) {\n    let hay = term.toLowerCase(), i = 0, n = -1, l;\n    search = search.toLowerCase();\n    for (; l = search[i++] ;) if (!~(n = hay.indexOf(l, n + 1))) return false;\n    return true;\n  }\n\n  /**\n   * lazy load palette\n   * and hide items whose not respect the fuzzySearch terms\n   *\n   * @param {string} text\n   */\n  search(text) {\n    if (this.isHide()) return;\n    console.log('start search', text);\n\n    const dom = this._findOrGenerateDom();\n    const items = [...dom.querySelectorAll('li')];\n\n    if (!text) {\n      items.forEach(li => li.classList.remove('cmd-palette-item--hide'));\n    } else {\n      items.forEach(li => {\n        if (CommandPalette._fuzzySearch(text, li.querySelector('.title').textContent)) {\n          li.classList.remove('cmd-palette-item--hide');\n        } else {\n          li.classList.add('cmd-palette-item--hide');\n        }\n      });\n    }\n\n    dom.querySelector('li[selected].cmd-palette-item--hide') && this.prev();\n    dom.querySelector('li[selected].cmd-palette-item--hide') && this.next();\n  }\n\n  /**\n   * lazy load palette\n   * and run selected command\n   */\n  dispatch() {\n    if (this.isHide()) return;\n\n    const dom = this._findOrGenerateDom();\n    const item = dom.querySelector('li[selected]:not(.cmd-palette-item--hide)');\n    if (!item) return;\n\n    const {category='', name} = item.dataset;\n    const context = this.contexts[category];\n    if(!context) return;\n\n    const command = context[name];\n    if(!command) return;\n\n    typeof command.action === 'function' && command.action();\n  }\n\n  /**\n   * place some events handler in document\n   *\n   * @private\n   */\n  _initEvent() {\n    this._docClickHide = event => {\n      if (event.target.matches('#cmd-palette') || event.target.closest('#cmd-palette')) return;\n\n      this.hide();\n    };\n\n    this._docKeyPressShow = evt => evt.ctrlKey && evt.altKey && evt.key === 'p' && palette.show();\n    this._docKeyPressNav = evt => {\n      if (palette.isHide()) return;\n\n      switch(evt.key) {\n        case 'ArrowDown':\n          this.next();\n          break;\n        case 'ArrowUp':\n          this.prev();\n          break;\n        case 'Enter':\n          this.dispatch();\n          break;\n      }\n    };\n\n    document.addEventListener('click', this._docClickHide);\n    document.addEventListener('keypress', this._docKeyPressShow);\n    document.addEventListener('keypress', this._docKeyPressNav);\n  }\n\n  /**\n   * Remove CommandPalette from DOM\n   */\n  destroy() {\n    document.removeEventListener('click', this._docClickHide);\n    document.removeEventListener('keypress', this._docKeyPressShow);\n    document.removeEventListener('keypress', this._docKeyPressNav);\n\n    const dom = this._findDom();\n    dom.parentNode.removeChild(dom);\n  }\n}"],"names":["sequence","contexts","_id","CommandPalette","_sequence","_initEvent","commands","name","context","this","forEach","cmd","command","document","getElementById","Object","entries","category","push","sort","a","b","localeCompare","title","map","idx","description","body","insertAdjacentHTML","_generateCommandDOM","join","dom","_findDom","querySelector","addEventListener","_this","search","event","target","value","_generateDom","_findOrGenerateDom","classList","replace","focus","contains","isHide","oldSelected","_getSelectedDomItem","selected","nextElementSibling","matches","removeAttribute","setAttribute","previousElementSibling","text","items","querySelectorAll","_fuzzySearch","li","textContent","remove","add","prev","next","item","dataset","action","_docClickHide","closest","hide","_docKeyPressShow","evt","ctrlKey","altKey","key","palette","show","_docKeyPressNav","dispatch","removeEventListener","parentNode","removeChild","term","hay","toLowerCase","i","n","l","indexOf"],"mappings":"22BAOA,IAAIA,EAAW,4IAgBNC,sBAGAC,IAAMC,EAAeC,eACrBC,qEAREL,oDAsCEM,4DAAaC,yDAAK,GACrBC,EAAUD,KAAYE,KAAKR,SAASM,KACjCG,QAAQ,mBAAOF,EAAQG,EAAIJ,MAAQI,SAEvCV,SAASM,GAAQC,wCAMVD,GACPA,KACAA,KAAQE,KAAKR,iBAEXQ,KAAKR,SAASM,yCAOVK,OAASL,yDAAK,QACpBN,SAASM,KAAUE,KAAKR,SAASM,YAEjCN,SAASM,GAAMK,EAAQL,MAAQK,4CAQ7BC,SAASC,8BAA8BL,KAAKP,uDAQ7CI,wCAE0BS,OAAOC,QAAQP,KAAKR,yDAAW,wBAArDgB,OAAUT,0CAEUO,OAAOC,QAAQR,kDAAU,wBAA3CD,OAAMK,SACLM,UACJN,GAASK,WAAUV,cACZU,EAAcA,OAAe,IAAKV,yKAK3CD,EACJa,KAAK,SAACC,EAAGC,UAAMD,EAAEH,SAASK,cAAcD,EAAEJ,WAAaG,EAAEG,MAAMD,cAAcD,EAAEE,SAC/EC,IAAI,SAACb,EAAKc,yCACYd,EAAIM,yBAAwBN,EAAIJ,UAAgB,IAARkB,EAAY,YAAa,wCAC9Dd,EAAIY,sDACEZ,EAAIe,0GAU7BC,KAAKC,mBAAmB,6CACRnB,KAAKP,mIAGtBO,KAAKoB,sBAAsBC,KAAK,iDAKlCC,EAAMtB,KAAKuB,oBACbC,cAAc,SAASC,iBAAiB,QAAS,mBAASC,EAAKC,OAAOC,EAAMC,OAAOC,SAEhFR,sDAQAtB,KAAKuB,YAAcvB,KAAK+B,kDAOzBT,EAAMtB,KAAKgC,uBACbC,UAAUC,QAAQ,oBAAqB,uBACvCV,cAAc,SAASW,uCAOfnC,KAAKgC,qBACbC,UAAUC,QAAQ,oBAAqB,6DASpClC,KAAKgC,qBAAqBC,UAAUG,SAAS,6DAS7CpC,KAAKgC,qBAAqBC,UAAUG,SAAS,0EAU7CpC,KAAKgC,qBAAqBR,cAAc,mDAQ3CxB,KAAKqC,cAEHC,EAActC,KAAKuC,yBACpBD,WACDE,EAAWF,EAETE,EAASC,uBACFD,EAASC,oBAEPC,QAAQ,+BAIXC,gBAAgB,cACnBC,aAAa,WAAY,iDAQ9B5C,KAAKqC,cAEHC,EAActC,KAAKuC,yBACpBD,WACDE,EAAWF,EAETE,EAASK,2BACFL,EAASK,wBAEPZ,UAAUG,SAAS,8BAItBO,gBAAgB,cACnBC,aAAa,WAAY,6CAwB7BE,OACD9C,KAAKqC,cAGHf,EAAMtB,KAAKgC,qBACXe,mIAAYzB,EAAI0B,iBAAiB,QAElCF,IAGG7C,QAAQ,YACRP,EAAeuD,aAAaH,EAAMI,EAAG1B,cAAc,UAAU2B,eAC5DlB,UAAUmB,OAAO,4BAEjBnB,UAAUoB,IAAI,8BANfpD,QAAQ,mBAAMiD,EAAGjB,UAAUmB,OAAO,8BAWtC5B,cAAc,wCAA0CxB,KAAKsD,SAC7D9B,cAAc,wCAA0CxB,KAAKuD,+CAQ7DvD,KAAKqC,cAGHmB,EADMxD,KAAKgC,qBACAR,cAAc,gDAC1BgC,SAEuBA,EAAKC,YAA1BjD,SAAAA,aAAS,KAAIV,IAAAA,KACdC,EAAUC,KAAKR,SAASgB,MAC1BT,OAEEI,EAAUJ,EAAQD,GACpBK,GAEsB,mBAAnBA,EAAQuD,QAAyBvD,EAAQuD,iEAS3CC,cAAgB,YACf/B,EAAMC,OAAOa,QAAQ,iBAAmBd,EAAMC,OAAO+B,QAAQ,mBAE5DC,aAGFC,iBAAmB,mBAAOC,EAAIC,SAAWD,EAAIE,QAAsB,MAAZF,EAAIG,KAAeC,QAAQC,aAClFC,gBAAkB,gBACjBF,QAAQ9B,gBAEL0B,EAAIG,SACJ,cACEX,iBAEF,YACED,iBAEF,UACEgB,sBAKF7C,iBAAiB,QAASzB,KAAK2D,wBAC/BlC,iBAAiB,WAAYzB,KAAK8D,2BAClCrC,iBAAiB,WAAYzB,KAAKqE,4DAOlCE,oBAAoB,QAASvE,KAAK2D,wBAClCY,oBAAoB,WAAYvE,KAAK8D,2BACrCS,oBAAoB,WAAYvE,KAAKqE,qBAExC/C,EAAMtB,KAAKuB,aACbiD,WAAWC,YAAYnD,0CApGTK,EAAQ+C,OACtBC,EAAMD,EAAKE,cAAeC,EAAI,EAAGC,GAAK,EAAGC,eACpCpD,EAAOiD,cACTG,EAAIpD,EAAOkD,YAAeC,EAAIH,EAAIK,QAAQD,EAAGD,EAAI,IAAK,OAAO,EACpE,OAAO"}