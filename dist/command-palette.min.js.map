{"version":3,"file":"command-palette.min.js","sources":["../src/CommandPalette.js"],"sourcesContent":["/**\n * @typedef {object} CommandPalette~Command\n * @property {string|symbol} name - Name of command (print in palette after category name)\n * @property {string} [description] - Detail text for explain action of command\n * @property {function} action - Callback when user press `Enter` on command when selected\n */\n\n/**\n * @callback CommandPalette~ConstructorOptionsShortcut\n * @param {KeyboardEvent} event - keypress event from document\n * @return {boolean} - return true if keypress event is your shortcut\n */\n\n/**\n * @callback CommandPalette~ConstructorOptionsNavigation\n * @param {KeyboardEvent} event - keypress event from document\n * @this {CommandPalette}\n */\n\n/**\n * @typedef {object} CommandPalette~ConstructorOptions\n * @property {string} [cssClass] - add if you want stylize the palette with your own css ;-)\n * @property {CommandPalette~ConstructorOptionsShortcut} [isShortcut] - take a KeyboardEvent and return if right shortcut, by default the shortcut is ctrl-alt-p\n * @property {CommandPalette~ConstructorOptionsNavigation} [navigationCallback] - take a KeyboardEvent and execute your navigation\n */\n\n/**\n * @type {number}\n * @private\n */\nlet sequence = 0;\n\n/**\n * @type {CommandPalette~ConstructorOptions}\n * @private\n */\nconst defaultOptions = {\n  isShortcut: event => event.ctrlKey && event.altKey && event.key === 'p',\n  navigationCallback(event) {\n    switch (event.key) {\n      case 'ArrowDown':\n        this.next();\n        break;\n      case 'ArrowUp':\n        this.prev();\n        break;\n      case 'Enter':\n        this.dispatch();\n        break;\n    }\n  }\n};\n\n/**\n * @property {CommandPalette~ConstructorOptions} options\n */\nclass CommandPalette {\n\n  /**\n   * @returns {number}\n   * @private\n   */\n  static get _sequence() {\n    return sequence++;\n  }\n\n  /**\n   * Default options is litteraly\n   *\n   * const defaultOptions = {\n   *  isShortcut: event => event.ctrlKey && event.altKey && event.key === 'p',\n   *  navigationCallback(event) {\n   *    switch (event.key) {\n   *      case 'ArrowDown':\n   *        this.next();\n   *        break;\n   *      case 'ArrowUp':\n   *        this.prev();\n   *        break;\n   *      case 'Enter':\n   *        this.dispatch();\n   *        break;\n   *    }\n   *  }\n   * }\n   *\n   * @param {CommandPalette~ConstructorOptions} [options={}] - Options for palette\n   * @example\n   * // add `cmd-palette--custom` class to classlist of root command-palette dom element\n   * new CommandPalette({\n   *  cssClass: 'cmd-palette--custom'\n   * });\n   *\n   * // use ctrl+alt+m ShortCut for display palette\n   * new CommandPalette({\n   *  isShortcut: e => e.ctrlKey && e.altKey && e.key === 'm'\n   * });\n   *\n   * // shift+ArrowDown or shift+ArrowUp for navigate 5 by 5\n   * new CommandPalette({\n   *  navigationCallback(event) {\n   *    switch(event.key) {\n   *      case 'ArrowDown':\n   *        event.shiftKey\n   *          ? (this.next(), this.next(), this.next(), this.next(), this.next())\n   *          : this.next();\n   *        break;\n   *      case 'ArrowUp':\n   *        event.shiftKey\n   *          ? (this.prev(), this.prev(), this.prev(), this.prev(), this.prev())\n   *          : this.prev();\n   *        break;\n   *      case 'Enter':\n   *        this.dispatch();\n   *        break;\n   *    }\n   *  }\n   * );\n   */\n  constructor(options = {}) {\n    this.categories = {\n      '': {}\n    };\n    this._id = CommandPalette._sequence;\n    this.options = Object.assign({}, defaultOptions, options);\n    this._initEvent();\n  }\n\n  /**\n   * If no category specified, merge commands in generic category\n   * else replace existent category (if exist) with this set of commands\n   *\n   * @param {CommandPalette~Command[]} commands\n   * @param {string|symbol} [category='']\n   *\n   * @example\n   * // add commands to default context\n   * palette.setCategory([\n   *  {\n   *    name: 'foo',\n   *    description: 'log `foo` in console'\n   *    action() {\n   *      console.log('foo');\n   *    }\n   *  }\n   * ])\n   *\n   * // replace `Bar` context\n   * palette.setCategory([\n   *  {\n   *    name: 'foo',\n   *    description: 'log `foo` in console'\n   *    action() {\n   *      console.log('foo');\n   *    }\n   *  }\n   * ], 'Bar')\n   */\n  setCategory(commands = [], category = '') {\n    const context = category ? {} : this.categories[category];\n    commands.forEach(cmd => context[cmd.name] = cmd);\n\n    this.categories[category] = context;\n  }\n\n  /**\n   * @param {string|symbol} category\n   */\n  removeCategory(category) {\n    if (!category) return;\n    if (!category in this.categories) return;\n\n    delete this.categories[category];\n  }\n\n  /**\n   * Add list (or single) Command to the category\n   *\n   * @param {CommandPalette~Command | CommandPalette~Command[]} commands\n   * @param {string|symbol} [category=''] - Generic category if not specified\n   */\n  addToCategory(commands, category = '') {\n    this.categories[category] || (this.categories[category] = {});\n\n    if (Array.isArray(commands)) {\n      commands.forEach(command => this.categories[category][command.name] = command);\n    } else {\n      this.categories[category][commands.name] = commands;\n    }\n  }\n\n  /**\n   * @returns {HTMLElement}\n   * @private\n   */\n  _findDom() {\n    return document.getElementById(`cmd-palette-${this._id}`);\n  }\n\n  /**\n   * @returns {string[]}\n   * @private\n   */\n  _generateCommandDOM() {\n    const commands = [];\n\n    for (let [category, context] of Object.entries(this.categories)) {\n      for (let [name, command] of Object.entries(context)) {\n        commands.push({\n          ...command, category, name,\n          title: `${category ? `${category}: ` : ''}${name}`,\n        });\n      }\n    }\n\n    return commands\n      .sort((a, b) => a.category.localeCompare(b.category) || a.title.localeCompare(b.title))\n      .map((cmd, idx) => `\n        <li data-category=\"${cmd.category}\" data-name=\"${cmd.name}\"${idx === 0 ? ' selected' : ''}>\n          <span class=\"title\">${cmd.title}</span>\n          <span class=\"description\">${cmd.description}</span>\n        </li>\n      `);\n  }\n\n  /**\n   * @returns {HTMLElement}\n   * @private\n   */\n  _generateDom() {\n    document.body.insertAdjacentHTML('afterbegin', `\n      <div id=\"cmd-palette-${this._id}\" class=\"cmd-palette${this.options.cssClass ? ' ' + this.options.cssClass : ''} cmd-palette--hide\">\n        <input type=\"text\" placeholder=\"Search Command\">\n        <ul>\n          ${this._generateCommandDOM().join('\\n')}\n        </ul>\n      </div>\n    `);\n\n    const dom = this._findDom();\n    dom.querySelector('input').addEventListener('keyup', event => this.search(event.target.value));\n\n    return dom;\n  }\n\n  /**\n   * @returns {HTMLElement}\n   * @private\n   */\n  _findOrGenerateDom() {\n    return this._findDom() || this._generateDom();\n  }\n\n  /**\n   * lazy load the command palette and display it\n   */\n  show() {\n    const dom = this._findOrGenerateDom();\n    dom.classList.replace('cmd-palette--hide', 'cmd-palette--show');\n    dom.querySelector('input').focus();\n  }\n\n  /**\n   * lazy load the command palette and hide it\n   */\n  hide() {\n    const dom = this._findOrGenerateDom();\n    dom.classList.replace('cmd-palette--show', 'cmd-palette--hide');\n  }\n\n  /**\n   * lazy load the command palette and return if it display\n   *\n   * @returns {boolean}\n   */\n  isShow() {\n    return this._findOrGenerateDom().classList.contains('cmd-palette--show');\n  }\n\n  /**\n   * lazy load the command palette and return if it not display\n   *\n   * @returns {boolean}\n   */\n  isHide() {\n    return this._findOrGenerateDom().classList.contains('cmd-palette--hide');\n  }\n\n  /**\n   * return selected element in list of commands\n   *\n   * @returns {Element | null}\n   * @private\n   */\n  _getSelectedDomItem() {\n    return this._findOrGenerateDom().querySelector('li[selected]');\n  }\n\n  /**\n   * lazy load the palette\n   * and select next item in command list\n   */\n  next() {\n    if (this.isHide()) return;\n\n    const oldSelected = this._getSelectedDomItem();\n    if (!oldSelected) return;\n    let selected = oldSelected;\n\n    while (selected.nextElementSibling) {\n      selected = selected.nextElementSibling;\n\n      if (selected.matches('.cmd-palette-item--hide')) continue;\n      break;\n    }\n\n    oldSelected.removeAttribute('selected');\n    selected.setAttribute('selected', 'selected');\n\n    CommandPalette._scrollTo(selected);\n  }\n\n  /**\n   * lazy load the palette\n   * and select previous item in command list\n   */\n  prev() {\n    if (this.isHide()) return;\n\n    const oldSelected = this._getSelectedDomItem();\n    if (!oldSelected) return;\n    let selected = oldSelected;\n\n    while (selected.previousElementSibling) {\n      selected = selected.previousElementSibling;\n\n      if (selected.classList.contains('cmd-palette-item--hide')) continue;\n      break;\n    }\n\n    oldSelected.removeAttribute('selected');\n    selected.setAttribute('selected', 'selected');\n\n    CommandPalette._scrollTo(selected);\n  }\n\n  /**\n   * @param {HTMLElement|Element} selected\n   * @private\n   */\n  static _scrollTo(selected) {\n    if (!selected) return;\n    if (!selected.parentElement) return;\n\n    const itemHeight = selected.clientHeight;\n    const scrollTopSelectedTopMax = selected.offsetTop - itemHeight;\n\n    selected.parentElement.scrollTop = scrollTopSelectedTopMax - (2 * itemHeight);\n  }\n\n  /**\n   * fuzzy searching\n   *\n   * @param {string} search\n   * @param {string} term\n   * @returns {boolean}\n   * @private\n   */\n  static _fuzzySearch(search, term) {\n    let hay = term.toLowerCase(), i = 0, n = -1, l;\n    search = search.toLowerCase();\n    for (; l = search[i++];) if (!~(n = hay.indexOf(l, n + 1))) return false;\n    return true;\n  }\n\n  /**\n   * lazy load palette\n   * and hide items whose not respect the fuzzySearch terms\n   *\n   * @param {string} text\n   */\n  search(text) {\n    if (this.isHide()) return;\n    text = text.trim();\n\n    const dom = this._findOrGenerateDom();\n    const items = [...dom.querySelectorAll('li')];\n\n    if (!text) {\n      items.forEach(li => li.classList.remove('cmd-palette-item--hide'));\n    } else {\n      items.forEach(li => {\n        if (CommandPalette._fuzzySearch(text, li.querySelector('.title').textContent)) {\n          li.classList.remove('cmd-palette-item--hide');\n        } else {\n          li.classList.add('cmd-palette-item--hide');\n        }\n      });\n    }\n\n    dom.querySelector('li[selected].cmd-palette-item--hide') && this.prev();\n    dom.querySelector('li[selected].cmd-palette-item--hide') && this.next();\n  }\n\n  /**\n   * lazy load palette\n   * and run selected command\n   */\n  dispatch() {\n    if (this.isHide()) return;\n\n    const dom = this._findOrGenerateDom();\n    const item = dom.querySelector('li[selected]:not(.cmd-palette-item--hide)');\n    if (!item) return;\n\n    const {category = '', name} = item.dataset;\n    const context = this.categories[category];\n    if (!context) return;\n\n    const command = context[name];\n    if (!command) return;\n\n    typeof command.action === 'function' && command.action();\n    this.hide();\n  }\n\n  /**\n   * place some events handler in document\n   *\n   * @private\n   */\n  _initEvent() {\n    this._docClickHide = event => {\n      if (event.target.matches('.cmd-palette') || event.target.closest('.cmd-palette')) return;\n\n      this.hide();\n    };\n\n    this._docKeyPressShow = evt => this.options.isShortcut(evt) && this.show();\n    this._docKeyPressNav = evt => {\n      if (this.isHide()) return;\n\n      this.options.navigationCallback.call(this, evt);\n    };\n\n    document.addEventListener('click', this._docClickHide);\n    document.addEventListener('keypress', this._docKeyPressShow);\n    document.addEventListener('keypress', this._docKeyPressNav);\n  }\n\n  /**\n   * Remove CommandPalette from DOM\n   */\n  destroy() {\n    document.removeEventListener('click', this._docClickHide);\n    document.removeEventListener('keypress', this._docKeyPressShow);\n    document.removeEventListener('keypress', this._docKeyPressNav);\n\n    const dom = this._findDom();\n    dom.parentNode.removeChild(dom);\n  }\n}\n\nexport default CommandPalette;"],"names":["sequence","defaultOptions","event","ctrlKey","altKey","key","next","prev","dispatch","options","categories","_id","CommandPalette","_sequence","Object","assign","_initEvent","commands","category","context","this","forEach","cmd","name","Array","isArray","_this","command","document","getElementById","entries","push","sort","a","b","localeCompare","title","map","idx","description","body","insertAdjacentHTML","cssClass","_generateCommandDOM","join","dom","_findDom","querySelector","addEventListener","_this2","search","target","value","_generateDom","_findOrGenerateDom","classList","replace","focus","contains","isHide","oldSelected","_getSelectedDomItem","selected","nextElementSibling","matches","removeAttribute","setAttribute","_scrollTo","previousElementSibling","text","trim","items","querySelectorAll","_fuzzySearch","li","textContent","remove","add","item","dataset","action","hide","_docClickHide","closest","_docKeyPressShow","_this3","isShortcut","evt","show","_docKeyPressNav","navigationCallback","call","removeEventListener","parentNode","removeChild","parentElement","itemHeight","clientHeight","scrollTopSelectedTopMax","offsetTop","scrollTop","term","hay","toLowerCase","i","n","l","indexOf"],"mappings":"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"}